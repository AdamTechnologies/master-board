import Head from 'next/head'
import Image from 'next/image'
import logo from '../../../public/owpLogo.png'
import logoOwp from '../../../public/owpLogo.png'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useDispatch, useSelector } from 'react-redux';
import React, { useState, useEffect } from 'react';
import { AppDispatch, RootState } from '@/store'
import { fetchUserData } from '@/slices/userActions'
import SideNav from '@/components/SideNav'
import TopNav from '@/components/TopNav'
import { Router } from 'next/router'


const inter = Inter({ subsets: ['latin'] })

const {fetchSweatData,fetchnoOfRecipies, acceptRecipe} = require('../api/sweatApi/index');

export default function Home() {
  const dispatch = useDispatch<AppDispatch>()

  const user = useSelector((state: RootState) => state.user.user); // Annotate RootState
  const loading = useSelector((state: RootState) => state.user.loading);
  const error = useSelector((state: RootState) => state.user.error);
  // const isLinkActive = (path: string) => {
  //   return Router.pathname === path ? 'active' : '';
  // };
  const [sweatData, setSweatData] = useState('');
  const [sweatNoOfRecipe, setSweatNoOfRecipe] = useState('');
  const [accessToken, setAccessToken] = useState('');
  const [token, setToken] = useState('');
  const [activeTab, setActiveTab] = useState('breakfast');

  useEffect(() => {
    // Fetch user data when the component mounts
    dispatch(fetchUserData());
    const fetchData = async () => {
      try {
        const data = await fetchSweatData(activeTab);
        // const data = await fetchApiData();
        setSweatData(data)
        // Handle the API response as needed
      } catch (error) {
        console.error('Error:', error);
      }
    };
    fetchData()
  }, [dispatch, accessToken]);

  useEffect(() => {
    // Fetch user data when the component mounts
    const fetchNoOfRecipe = async () => {
      try {
        const data = await fetchnoOfRecipies();
        // const data = await fetchApiData();
        setSweatNoOfRecipe(data)
        // Handle the API response as needed
      } catch (error) {
        console.error('Error:', error);
      }
    };
    fetchNoOfRecipe()
  }, [accessToken]);


  useEffect(() => {
    dispatch(fetchUserData());
  }, [dispatch]);


  const handleTabClick = async (tabId) => {
    setActiveTab(tabId);
    const data = await fetchSweatData(tabId);
    setSweatData(data);
  };

  const allowRecipe = async (recipeId) => {
    try {
      const data = await acceptRecipe(recipeId);
      console.log('recipeData', data);
  
      // Refresh the page after a successful API call
      window.location.reload();
    } catch (error) {
      if (error.response) {
        // Handle error as needed
      } else if (error.request) {
        // Handle error as needed
      } else {
        // Handle error as needed
      }
    }
  };
  

  useEffect(() => {
    console.log('itemsssssssssss', sweatData);
  }, [sweatData]);

  useEffect(() => {
    console.log('itemsssssssssssNUMBERS', sweatNoOfRecipe.data?.breakfast_count);
  }, [sweatNoOfRecipe]);

  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <TopNav />

      <div className="container-fluid">
        <div className="row">
          <div className="col-sm-2">
            <SideNav />
          </div>

          <div className="col-sm-10">
            <div className="container mt-0">
              {/* <div className="mb-4 border-gray-200 dark:border-gray-700">
                <ul className="flex flex-wrap -mb-px text-sm font-medium text-center" role="tablist">
                  <li className={`nav-item ${activeTab === 'breakfast' ? 'active' : ''}`}>
                    <button className="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400  dark:hover:text-white dark:hover:bg-gray-700" onClick={() => handleTabClick('breakfast')} href="#breakfast">
                      Break Fast {sweatNoOfRecipe.data?.breakfast_count}
                    </button>
                  </li>
                  <li className={`nav-item ${activeTab === 'lunch' ? 'active' : ''}`}>
                    <button className="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700" onClick={() => handleTabClick('lunch')} href="#lunch">
                      Lunch {sweatNoOfRecipe.data?.lunch_count}
                    </button>
                  </li>
                  <li className={`nav-item ${activeTab === 'dinner' ? 'active' : ''}`}>
                    <button className="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700" onClick={() => handleTabClick('dinner')} href="#dinner">
                      Dinner {sweatNoOfRecipe.data?.dinner_count}
                    </button>
                  </li>
                </ul>
              </div> */}
              <div className="tab-content">
                <div id="breakfast" className={`container tab-pane ${activeTab === 'breakfast' ? 'active' : 'fade'}`}>
                  <br />
                  {/* <h3 className="text-2xl font-semibold">Break Fast</h3> */}

                  <div className="relative overflow-x-auto shadow-md sm:rounded-lg">
                    <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                      <thead className="text-xs text-gray-700 uppercase bg-blue-100 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                          <th scope="col" className="px-6 py-3">
                            ITEMS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            DESCRIPTION
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INGREDIENTS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INSTRUCTIONS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            Action
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {sweatData?.data?.map((recipe) => (
                          <>
                            <tr
                              key={recipe._id} scope="row"
                              className="px-6 py-2 font-medium text-gray-900 whitespace-nowrap dark:text-white border-b border-gray-300"
                            >
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.title}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.description}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">
                                <ul>
                                  {recipe?.ingredients?.map((ingredient) => (
                                    <li key={ingredient._id}>
                                      {ingredient.name} - {ingredient.quantity}
                                    </li>
                                  ))}
                                </ul>
                              </td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe?.instructions}</td>
                              <td className="px-6 py-2">
                              <button onClick={() => allowRecipe(recipe._id)} className="bg-blue-500 text-white font-medium py-1 px-2 rounded-md text-xs hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300">Waiting</button>

                              </td>
                            </tr>

                          </>
                        ))}

                      </tbody>
                    </table>
                  </div>

                </div>
                <div id="lunch" className={`container tab-pane ${activeTab === 'lunch' ? 'active' : 'fade'}`}>
                <div className="relative overflow-x-auto shadow-md sm:rounded-lg">
                    <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                      <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                          <th scope="col" className="px-6 py-3">
                            {activeTab}
                          </th>
                          <th scope="col" className="px-6 py-3">
                            DESCRIPTION
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INGREDIENTS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INSTRUCTIONS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            Action
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {sweatData?.data?.map((recipe) => (
                          <>
                            <tr
                              key={recipe._id} scope="row"
                              className="px-6 py-2 font-medium text-gray-900 whitespace-nowrap dark:text-white border-b border-gray-300"
                            >
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.title}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.description}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">
                                <ul>
                                  {recipe?.ingredients?.map((ingredient) => (
                                    <li key={ingredient._id}>
                                      {ingredient.name} - {ingredient.quantity}
                                    </li>
                                  ))}
                                </ul>
                              </td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe?.instructions}</td>
                              <td className="px-6 py-2">
                                <a href="#" className="font-medium text-blue-600 dark:text-blue-500 hover:underline">Approved</a>
                              </td>
                            </tr>

                          </>
                        ))}

                      </tbody>
                    </table>
                  </div>
                </div>
                <div id="dinner" className={`container tab-pane ${activeTab === 'dinner' ? 'active' : 'fade'}`}>
                <div className="relative overflow-x-auto shadow-md sm:rounded-lg">
                    <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                      <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                          <th scope="col" className="px-6 py-3">
                            {activeTab}
                          </th>
                          <th scope="col" className="px-6 py-3">
                            DESCRIPTION
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INGREDIENTS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            INSTRUCTIONS
                          </th>
                          <th scope="col" className="px-6 py-3">
                            Action
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {sweatData?.data?.map((recipe) => (
                          <>
                            <tr
                              key={recipe._id} scope="row"
                              className="px-6 py-2 font-medium text-gray-900 whitespace-nowrap dark:text-white border-b border-gray-300"
                            >
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.title}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe.description}</td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">
                                <ul>
                                  {recipe?.ingredients?.map((ingredient) => (
                                    <li key={ingredient._id}>
                                      {ingredient.name} - {ingredient.quantity}
                                    </li>
                                  ))}
                                </ul>
                              </td>
                              <td className="px-6 py-2 text-gray-900 dark:text-white">{recipe?.instructions}</td>
                              <td className="px-6 py-2">
                                <a href="#" className="font-medium text-blue-600 dark:text-blue-500 hover:underline">Approved</a>
                              </td>
                            </tr>

                          </>
                        ))}

                      </tbody>
                    </table>
                  </div>
               </div>
              </div>
            </div>



          </div>

        </div>
      </div>


    </>
  )
}
